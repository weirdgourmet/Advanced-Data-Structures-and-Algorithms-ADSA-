/*The symbol table is generated by compiler. From this perspective, the symbol table
is a set of name-attribute pairs. In a symbol table for a compiler, the name is an
identifier, and the attributes might include an initial value and a list of lines that use
the identifier. Perform the following operations on symbol table:
(1) Determine if a particular name is in the table
(2) Retrieve the attributes of that name
(3) Modify the attributes of that name
(4) Insert a new name and its attributes
(5) Delete a name and its attributes*/

#include<iostream>
using namespace std;
class Symbol
{
	string name;
	string initVal;
	int line[10];
	int chain;
	public:
	friend class Table;
	void print()
	{
		cout<<"Name : "<<name<<"\nInitial Value : "<<initVal<<"\nList of lines : ";
		for(int i=0;i<10;i++)
			if(line[i]!=-1)
				cout<<line[i]<<"\t";
		cout<<endl<<chain;
		cout<<endl<<endl;
	}
	void get()
	{
		cout<<"Enter name"<<endl;
		cin>>name;
		cout<<"Enter initial value."<<endl;
		cin>>initVal;
		cout<<"Enter the lines in which "<<name<<" occurs. Enter -1 at end."<<endl;
		for(int i=0;i<10;i++)
		{
			cin>>line[i];
			if(line[i]==-1)
				break;
		}
	}
	Symbol()
	{
		name='\0';
		initVal='0';
		for(int i=0;i<10;i++)
			line[i]=-1;
		chain=-1;
	}
};
class Table
{
	Symbol s[26];
	bool rf;
	public:
	void create();
	void add();
	void del();
	void update();
	int find(string);
	void attr();
	void present();
	void printTable();
	int hash(char);
	Table();
};
Table::Table()
{
	
	cout<<"Enter 1 for with replacement, 0 for without replacement."<<endl;
	cin>>rf;
}
void Table::attr()
{
	string key;
	cout<<"Enter key."<<endl;
	cin>>key;
	int b=find(key);
	if(b==-1)
	{
		cout<<"Not found."<<endl;
		return;
	}
	s[b].print();
}
void Table::del()
{
	string key;
	Symbol a;
	int b,c;
	cout<<"Enter key to be deleted."<<endl;
	cin>>key;
	b=find(key);
	if(b==-1)
	{
		cout<<"Not found."<<endl;
		return;
	}
	if(b==hash(key[0]))
	{
		c=s[b].chain;
		if(c>=0)
		{
			s[b]=s[c];
			s[c]=a;
		}
		else
			s[b]=a;
		return;
	}
	for(c=hash(key[0]);s[c].chain!=b&&s[c].chain!=-1;c=s[c].chain);
	if(s[c].chain==b)
	s[c].chain=s[b].chain;
	s[b]=a;
}
void Table::update()
{
	string key;
	int b;
	cout<<"Enter key."<<endl;
	cin>>key;
	b=find(key);
	if(b==-1)
	{
		cout<<"Not found."<<endl;
		return;
	}
	Symbol a;
	cout<<"Enter initial value."<<endl;
	cin>>a.initVal;
	cout<<"Enter the lines in which "<<a.name<<" occurs. Enter -1 at end."<<endl;
	for(int i=0;i<10;i++)
	{
		cin>>a.line[i];
		if(a.line[i]==-1)
			break;
	} 
	a.name=key;
	a.chain=s[b].chain;
	s[b]=a;
}
int Table::find(string key)
{
	int i,b,c;
	b=hash(key[0]);
	if(rf)
	{
		if(s[b].name[0]=='\0')
			return(-1);
		for(;b!=-1;b=s[b].chain)
		{
			if(s[b].name==key)
				return(b);
		}
		return(-1);
	}
	else
	{
		if(s[b].name[0]=='\0')
			return(-1);
		for(i=0;s[b+i].name[0]!='\0'&&hash(s[b+i].name[0])!=b;)
		{
			if(i+b==25)
				i=-1-b;
			i++;
			if(i==0)
				return(-1);
		}
		if(s[b+i].name[0]=='\0')
			return(-1);
		
		for(c=b+i;c!=-1;c=s[c].chain)
			if(s[c].name==key)
				return(c);
		return(-1);
	}
}
void Table::present()
{
	cout<<"Enter name to be searched."<<endl;
	string key;
	cin>>key;
	int b;
	b=find(key);
	if(b==-1)
		cout<<"Not present."<<endl;
	else
		cout<<"Present at location "<<b<<endl;
}
void Table::printTable()
{
	int i;
	for(i=0;i<26;i++)
	{
		cout<<i<<"\t";
		s[i].print();
	}
}
int Table::hash(char c)
{
	if(c>=97)
	{
		return(c-97);
	}
	return(c-65);
}
void Table::add()
{
	int b,c=-1,d,i;
	Symbol a,a1;
	a.get();
	b=hash(a.name[0]);
	if(rf)
	{
			if(hash(s[b].name[0])!=b&&s[b].name[0]!='\0')
			{
				a1=s[b];
				s[b]=a;
				a=a1;
				c=hash(a.name[0]);
				for(;s[c].chain!=b;c=s[c].chain);
			}
			else if(s[b].name[0]!='\0')
			{
				for(c=b;s[c].chain!=-1;c=s[c].chain);
			}
			for(i=0;s[b+i].name[0]!='\0';)
			{
				if((i+b)==25)
					i=-1-b;
				i++;
				if(i==0)
				{
					cout<<"Full. Cannot add new word."<<endl;
					return;
				}
			}
			s[b+i]=a;
			if(c!=-1)
				s[c].chain=b+i;
	}
	else
	{
		for(i=0;s[b+i].name[0]!='\0'&&hash(s[b+i].name[0])!=b;)
		{
			if(i+b==25)
					i=-1-b;
				i++;
				if(i==0)
				{
					cout<<"Full1. Cannot add new word."<<endl;
					return;
				}
		}
		if(s[b+i].name[0]=='\0')
		{
			s[b+i]=a;
			return;
		}
		c=b+i;
		for(;s[c].chain!=-1;c=s[c].chain);
		for(i=0;s[c+i].name[0]!='\0';)
			{
				if((i+c)==25)
					i=-1-c;
				i++;
				if(i==0)
				{
					cout<<"Full2. Cannot add new word."<<endl;
					return;
				}
			}
		s[c+i]=a;
		s[c].chain=c+i;
	}
	
}
main()
{
	Table T;
	int op;
	do
	{
		cout<<"Select an option.\n1.Add a new Symbol.\n2.Update attributes of a Symbol.\n3.Delete a Symbol.\n4.Retrieve attributes 				of a name.\n5.Search a Symbol.\n6.Print Symbol Table contents.\n7.Exit\n";
		cin>>op;
		switch(op)
		{
			case 1:T.add();
				break;
				
			case 2:T.update();
				break;
				
			case 3:T.del();
				break;
				
			case 4:T.attr();
				break;
				
			case 5:T.present();
				break;
				
			case 6:T.printTable();
				break;
				
			case 7:break;
			
			default:cout<<"Enter valid input."<<endl;
		}
			
	}while(op!=7);
		
	return(0);
}
